@using Chinook.Shared.DataAccess;
@using System.Security.Claims;
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="playlist/1">
                <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>My favorite tracks
            </NavLink>
        </div>

        @foreach (var pl in Playlists)
        {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href=@("playlist/" + @pl.PlaylistId)>
                    @* Playlist name *@
                        <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>
                        <span>@pl.Name</span>

                    @* Delete icon*@
                        <a href="#" class="m-1" title="Delete playlist" @onclick="@(() => DeletePlaylist(@pl.PlaylistId))" @onclick:preventDefault>
                            <i class="bi bi-trash"></i>
                        </a>
                    </NavLink>
                </div>
        }
    </nav>
</div>

@code {
    private List<Models.Playlist> Playlists;
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    [Inject] IPlaylistRepository PlaylistRepository { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        RefreshPlayList();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async void DeletePlaylist(long playlistId)
    {
        PlaylistRepository.DeletePlaylist(playlistId);
        RefreshPlayList();
    }

    private async void RefreshPlayList()
    {
        var CurrentUserId = await GetUserId();
        Playlists = await PlaylistRepository.GetAllPlaylistForUser(CurrentUserId);
    }
}
