@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.Shared.DataAccess;
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>Artists</h1>
<div class="form-group mb-2">
    <label for="SearchQuery">Search</label>
    <input type="text" id="SearchQuery" class="form-control" @oninput="DoSearch" placeholder="Type artist name to search - this is case sensitive">
</div>
@if (Artists == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    [Inject] IArtistRepository ArtistRepository { get; set; }

    private List<Artist> Artists;

    /// <summary>
    ///     oninput event handler for search field
    /// </summary>
    /// <param name="arg"></param>
    private async void DoSearch(ChangeEventArgs arg)
    {
        Artists = await ArtistRepository.GetArtistsFiltered(arg.Value.ToString());
    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);

        Artists = await ArtistRepository.GetArtistsFiltered(string.Empty);
    }

    //public async Task<List<Artist>> GetArtists()
    //{
    //    var dbContext = await DbFactory.CreateDbContextAsync();
    //    var users = dbContext.Users.Include(a => a.UserPlaylists).ToList();

    //    return dbContext.Artists.ToList();
    //}

    //public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    //{
    //    var dbContext = await DbFactory.CreateDbContextAsync();
    //    return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    //}
}
